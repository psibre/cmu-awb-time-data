plugins {
    id "org.m2ci.msp.github-ivy-repo" version "0.1.1"
    id "org.m2ci.msp.flaml" version "0.3.0"
    id 'ivy-publish'
}

group 'de.dfki.mary'
version '0.2-SNAPSHOT'

repositories {
    github('psibre')
}

configurations.create 'flaml'

dependencies {
    flaml group: 'de.dfki.mary', name: 'cmu-awb-time-data', version: '0.1'
}

task unpackFlaml(type: UnpackFlaml) {
    srcFiles = files(configurations.flaml)
    yamlFile = layout.buildDirectory.file('cmu-awb-time-data.yaml')
    flacFile = layout.buildDirectory.file('cmu-awb-time-data.flac')
}

flaml {
    yamlFile = unpackFlaml.yamlFile
    flacFile = unpackFlaml.flacFile
}

task packageYaml(type: Zip) {
    from flaml.yamlFile
    from 'LICENSE.md'
}

publishing {
    publications {
        flaml(IvyPublication) {
            module = 'cmu-awb-time-data'
            artifact packageYaml {
                classifier 'yaml'
            }
            artifact source: project.flaml.flacFile.get().asFile, classifier: 'flac'
            descriptor {
                status = project.version.endsWith('-SNAPSHOT') ? 'integration' : 'release'
            }
        }
    }
    repositories {
        ivy {
            name 'projectLocal'
            url "$buildDir/repo"
        }
    }
}

class UnpackFlaml extends DefaultTask {

    @InputFiles
    FileCollection srcFiles = project.files()

    @OutputFile
    final RegularFileProperty yamlFile = newOutputFile()

    @OutputFile
    final RegularFileProperty flacFile = newOutputFile()

    @TaskAction
    void unpack() {
        def destDir = flacFile.get().asFile.parentFile
        project.copy {
            from srcFiles
            into destDir
            filesMatching '*.zip', { zipFileDetails ->
                project.copy {
                    from project.zipTree(zipFileDetails.file)
                    into yamlFile.get().asFile.parent
                }
                zipFileDetails.exclude()
            }
            filesMatching '*.flac', {
                it.path = flacFile.get().asFile.name
            }
        }
    }
}
